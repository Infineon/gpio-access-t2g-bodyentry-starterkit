source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if {[using_jtag]} {
   adapter speed 1000
} else {
   adapter speed 2000
}

adapter srst delay 25
adapter srst pulse_width 5

global ENABLE_SMIF
if { ![info exists ENABLE_SMIF] } {
	set ENABLE_SMIF 0
}

global _CHIPNAME
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME player28
}

global _WA_SIZE_CM33
if { [info exists WA_SIZE_CM33] } {
	set _WA_SIZE_CM33 $WA_SIZE_CM33
} else {
	set _WA_SIZE_CM33 0x8000
}

global _WA_ADDR_CM33
if { [info exists WA_ADDR_CM33] } {
	set _WA_ADDR_CM33 $WA_ADDR_CM33
} else {
	set _WA_ADDR_CM33 0x30178000
}

global TARGET
set TARGET $_CHIPNAME
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

proc init_reset { mode } {
	global RESET_MODE
	set RESET_MODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

proc player28_deassert_reset { t } {
	global RESET_MODE

	if { $RESET_MODE ne "run" } {
		$t arp_examine
		$t arp_poll
		$t arp_poll
		$t arp_halt
		$t arp_waitstate halted 1000

		global ENABLE_SMIF
		global HSIOM_SECURE_PRT_BASE
		global GPIO_BASE_OUT
		global GPIO_BASE_CFG
		global NCS_BIT
		global CLK_BIT
		global MISO_BIT
		global MOSI_BIT

		if { $ENABLE_SMIF } {
			# Configure SMIF GPIO
			mww $HSIOM_SECURE_PRT_BASE 0
			mww $GPIO_BASE_OUT 0xFFFFFFFF
			mww $GPIO_BASE_CFG [expr \
				(6 << (4 * $NCS_BIT) ) | \
				(6 << (4 * $CLK_BIT) ) | \
				(8 << (4 * $MISO_BIT) ) | \
				(8 << (4 * $MOSI_BIT) )]
		}
	}
}

if { $ENABLE_SMIF } {
	proc player28_smif_init { {bank 0} } {
		local_echo off

		# Reset the chip
		cmspi cmd $bank 0 0x66
		cmspi cmd $bank 0 0x99

		# Forse 4-byte addressing
		cmspi cmd $bank 0 0xB7

		# Read CFR3N
		# (0x00 means hybrid, 0x08 means uniform)
		# (0x10 - 512b page,  0x00 - 256b page)
		set cfr3 [string range [cmspi cmd $bank 1 0x65 0x00 0x00 0x00 0x04] 23 24]

		if { $cfr3 != "18" } {
			# Write enable
			cmspi cmd $bank 0 0x06
			cmspi cmd $bank 0 0x71 0x00 0x00 0x00 0x04 0x18
			sleep 300

			# Reset the chip
			cmspi cmd $bank 0 0x66
			cmspi cmd $bank 0 0x99

			# Forse 4-byte addressing
			cmspi cmd $bank 0 0xB7

			# Read CFR3N
			# (0x00 means hybrid, 0x08 means uniform)
			# (0x10 - 512b page,  0x00 - 256b page)
			set cfr3 [string range [cmspi cmd $bank 1 0x65 0x00 0x00 0x00 0x04] 23 24]
			if { $cfr3 != "18" } {
				puts stderr "Failed to enable Uniform Sectors and 512-byte Pages (CFR3 = 0x$cfr3)"
				shutdown
			} else {
				puts stderr "Uniform Sectors and 512-byte Pages enabled! (CFR3 = 0x$cfr3)"
			}
		}

		local_echo on
	}

	proc player28_smif_uninit { {bank 0} } {
		local_echo off

		# Reset the chip
		cmspi cmd $bank 0 0x66
		cmspi cmd $bank 0 0x99

		# Forse 4-byte addressing
		cmspi cmd $bank 0 0xB7

		# Read CFR3N
		# (0x00 means hybrid, 0x08 means uniform)
		# (0x10 - 512b page,  0x00 - 256b page)
		set cfr3 [string range [cmspi cmd $bank 1 0x65 0x00 0x00 0x00 0x04] 23 24]

		if { $cfr3 != "00" } {
			# Write enable
			cmspi cmd $bank 0 0x06
			cmspi cmd $bank 0 0x71 0x00 0x00 0x00 0x04 0x00
			sleep 300

			# Reset the chip
			cmspi cmd $bank 0 0x66
			cmspi cmd $bank 0 0x99

			# Forse 4-byte addressing
			cmspi cmd $bank 0 0xB7

			# Read CFR3N
			# (0x00 means hybrid, 0x08 means uniform)
			# (0x10 - 512b page,  0x00 - 256b page)
			set cfr3 [string range [cmspi cmd $bank 1 0x65 0x00 0x00 0x00 0x04] 23 24]
			if { $cfr3 != "00" } {
				puts stderr "Failed to restore original Page/Sector settings (CFR3 = 0x$cfr3)"
				shutdown
			} else {
				puts stderr "Original Page/Sector settings restored (CFR3 = 0x$cfr3)"
			}
		}

		local_echo on
	}
}

target create ${TARGET}.sysap mem_ap -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
target create ${TARGET}.cm33 cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 0
${TARGET}.cm33 configure -work-area-phys $_WA_ADDR_CM33 -work-area-size $_WA_SIZE_CM33
${TARGET}.cm33 configure -event reset-deassert-post "player28_deassert_reset ${TARGET}.cm33"
${TARGET}.cm33 cortex_m reset_config sysresetreq

# Only SRST reset works correctly
reset_config srst_only

### SMIF memory ###
if { $ENABLE_SMIF } {
	set GPIO_PORT             11
	set GPIO_BASE             [ expr 0x40410000 + ($GPIO_PORT * 0x80) ]
	set HSIOM_SECURE_PRT_BASE [ expr 0x40401000 + ($GPIO_PORT * 0x10) ]
	set GPIO_BASE_OUT         [ expr $GPIO_BASE + 0x00 ]
	set GPIO_BASE_IN          [ expr $GPIO_BASE + 0x10 ]
	set GPIO_BASE_CFG         [ expr $GPIO_BASE + 0x44 ]

	set NCS_BIT  2
	set CLK_BIT  7
	set MOSI_BIT 6
	set MISO_BIT 5

	flash bank ${_CHIPNAME}_smif cmspi 0x18000000 0 4 4 ${TARGET}.cm33 \
		0x10 \
		$GPIO_BASE $NCS_BIT $GPIO_BASE $CLK_BIT \
		$GPIO_BASE $MISO_BIT 0x44 0x44 [ expr 0x0E << (4 * $MISO_BIT) ] \
		$GPIO_BASE $MOSI_BIT 0x44 0x44 [ expr 0x0E << (4 * $MOSI_BIT) ]

	flash set_memory_mapped ${_CHIPNAME}_smif off
}
### SMIF memory ###


if {[using_jtag]} {
	if { [info exists TRAVEOII_PSVP] } {
		swj_newdap $_CHIPNAME bs -irlen 18 -expected-id 0x00000000
	} else {
		swj_newdap $_CHIPNAME bs -irlen 4
	}
}
