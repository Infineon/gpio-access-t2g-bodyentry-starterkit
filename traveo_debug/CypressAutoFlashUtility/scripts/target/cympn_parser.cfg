source [find target/cympn.cfg]

#
# returns size of main and work flash of connected MPN
#
# Performs following:
#	- reads SiId from sflash
#	- path through UDD and searches for record with the SiId
#	- if the record is found then size of main and work flash is extracted
#		and returned, otherwise empty list is returned
#
# arguments:
#	target_arch - used architecture, can be "psoc6" or "traveo2"
#
# return
#	list of flash sizes in form {main_size_kb work_size_kb}
#
proc cyp_get_mpn_work_main_size { target_arch } {

	global MPN

	set siid ""
	set revision ""
	set family ""
	switch $target_arch {
		"psoc6" {
		set addr_siid 0x16000000
		set addr_family 0x1600000C
		}
		"traveo2" {
		set addr_siid 0x17000000
		set addr_family 0x1700000C
		}
	}
	catch {
		set siid [format "%04X" [expr [mrw $addr_siid] >> 16]]
		DEBUG_MSG "siid = $siid"
		set revision [format "%02X" [expr [expr [mrw $addr_siid] & 0x0000FF00] >> 8]]
		DEBUG_MSG "revision = $revision"
		set family [format "%03X" [expr [mrw $addr_family] & 0x00000FFF]]
		DEBUG_MSG "family = $family"
	}

	if {$family != ""} {
		# as per MTRO-57
		set rev_major [string index $revision 0]
		if { $rev_major == "0" } {
			set rev_major_str "*"
		} else {
			set rev_major_str [format %c [expr $rev_major + 0x40]]
		}

		set rev_minor [string index $revision 1]
		if { $rev_minor == "0" } {
			set rev_minor_str "*"
		} else {
			set rev_minor_str [expr $rev_minor - 1 ]
		}

		set rev_str "[format %c [expr $rev_major + 0x40]]$rev_minor"
		echo "** Silicon: 0x$siid, Family: 0x$family, Rev.: 0x$revision (${rev_major_str}${rev_minor_str})"
	}

	if { [dict exists $MPN $siid] } {
		set PN [lindex $MPN($siid) 0]
		set DIE [lindex $MPN($siid) 1]
		set main_size [lindex $MPN($siid) 2]
		set work_size [lindex $MPN($siid) 3]
		echo "** Detected Device: $PN"
		DEBUG_MSG "** Detected DIE: $DIE MainSize: $main_size WorkSize: $work_size"
		return [list $main_size $work_size]
	} else {
		echo "** Device is not present in the UDD"
		DEBUG_MSG "Error: target device is not detected in UDD"
	}

	return {}
}
