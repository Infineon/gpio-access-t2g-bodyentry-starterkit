#
# Configuration script for Cypress PSoC 6 family of microcontrollers (CY8C6xxx).
# PSoC 6 is a dual-core device with CM0+ and CM4 cores. Both cores share
# the same Flash/RAM/MMIO address space.
#

source [find target/swj-dp.tcl]

if {[using_jtag]} {
   adapter speed 1000
} else {
   adapter speed 2000
}

adapter srst delay 25
adapter srst pulse_width 5

global _CHIPNAME
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME psoc6
}

source [find target/cy_get_set_device_param.cfg]

#
# Is CM0 Debugging enabled ?
#
global _ENABLE_CM0
if { [info exists ENABLE_CM0] } {
	set _ENABLE_CM0 $ENABLE_CM0
} else {
	set _ENABLE_CM0 1
}

#
# Is CM4 Debugging enabled ?
#
global _ENABLE_CM4
if { [info exists ENABLE_CM4] } {
	set _ENABLE_CM4 $ENABLE_CM4
} else {
	set _ENABLE_CM4 1
}

if { $_ENABLE_CM0 } {
	set _ACQUIRE_TARGET cm0
} else {
	set _ACQUIRE_TARGET cm4
}

# Enable Test Mode Acquire (works only with KitProg3 / MiniProg4)
#
global _ENABLE_ACQUIRE
global _ENABLE_POWER_SUPPLY
if { [adapter name] eq "kitprog3" } {
	if { [info exists ENABLE_ACQUIRE] } {
		set _ENABLE_ACQUIRE $ENABLE_ACQUIRE
	} else {
		if {[using_jtag]} {
			set _ENABLE_ACQUIRE 0
			echo "** Test Mode acquire disabled (not supported in JTAG mode)"
		} else {
			set _ENABLE_ACQUIRE 1
		}
	}

	if { [info exists ENABLE_POWER_SUPPLY] } {
		set _ENABLE_POWER_SUPPLY $ENABLE_POWER_SUPPLY
	} else {
		set _ENABLE_POWER_SUPPLY 0
	}
} else {
	set _ENABLE_ACQUIRE  0
	set _ENABLE_POWER_SUPPLY 0
	echo "** Test Mode acquire not supported by selected adapter"
}

if { $_ENABLE_ACQUIRE } {
	echo "** Auto-acquire enabled, use \"set ENABLE_ACQUIRE 0\" to disable"
	kitprog3 acquire_config on 2 0 2
}

if { $_ENABLE_POWER_SUPPLY } {
	echo "** Enabling target power ($_ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on $_ENABLE_POWER_SUPPLY
}

global _WORKAREASIZE_CM0
if { [info exists WORKAREASIZE_CM0] } {
	set _WORKAREASIZE_CM0 $WORKAREASIZE_CM0
} else {
	set _WORKAREASIZE_CM0 0x8000
}

global _WORKAREASIZE_CM4
if { [info exists WORKAREASIZE_CM4] } {
	set _WORKAREASIZE_CM4 $WORKAREASIZE_CM4
} else {
	set _WORKAREASIZE_CM4 0x8000
}

global _WORKAREAADDR_CM0
if { [info exists WORKAREAADDR_CM0] } {
	set _WORKAREAADDR_CM0 $WORKAREAADDR_CM0
} else {
	set _WORKAREAADDR_CM0 0x08000000
}

global _WORKAREAADDR_CM4
if { [info exists WORKAREAADDR_CM4] } {
	set _WORKAREAADDR_CM4 $WORKAREAADDR_CM4
} else {
	set _WORKAREAADDR_CM4 0x08000000
}

global TARGET
set TARGET $_CHIPNAME.cpu
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

proc init_reset { mode } {
	global RESET_MODE
	set RESET_MODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

proc check_flashboot_version {} {
	set rev_id ""
		catch {
		set si_id [mrw 0x16000000]
		set fb_ver [mrw 0x16002004]
		set rev_id [format "%02X" [expr ($si_id & 0xFF00) >> 8]]
	}

	# SI revision 0x22 (*B) and
	# versioning scheme #2 (ALXD-31) with major mersion #0 (PSoC6A-BLE-2 *A/*B/*C) and
	# FB build number older than #29
	if { $rev_id == "22" && \
		 [expr $fb_ver & 0xFF00FFFF] == 0x02008001 && \
		 [expr ($fb_ver & 0x00FF0000) >> 16] < 29 } {
		 puts stderr "*******************************************************************************"
		 puts stderr "* Your PSoC6 KIT is out of date. Please contact Cypress to get a replacement. *"
		 puts stderr "*******************************************************************************"
	}
}

# Utility to make 'reset halt' work as reset;halt on a target
# It does not prevent running code after reset
proc psoc6_deassert_post { target } {
	global _ENABLE_ACQUIRE
	global _ACQUIRE_TARGET
	global RESET_MODE

	if { $RESET_MODE ne "run" } {
		if { [string match "*${_ACQUIRE_TARGET}" $target] } {
			if { $_ENABLE_ACQUIRE } {
				catch { acquire psoc6.cpu.${_ACQUIRE_TARGET} }
			}

#			catch {
#				echo "** SFlash SiliconID:   0x[format %08X [mrw 0x16000000]]"
#				echo "** Flash Boot version: 0x[format %08X [mrw 0x16002004]]"
#				echo "** Chip Protection: [chip_protection]"
#			}

			check_flashboot_version
		}

		# PSoC 6 cleared AP registers including TAR during reset
		# Force examine to synchronize OpenOCD target status
		$target arp_examine
		$target arp_poll
		$target arp_poll
		set st [$target curstate]

		if { $st eq "reset" } {
			# we assume running state follows
			# if reset accidentally halts, waiting is useless
			catch { $target arp_waitstate running 100 }
			set st [$target curstate]
		}

		if { $st eq "running" } {
			echo "** $target: Ran after reset and before halt..."
			if [string match "*${_ACQUIRE_TARGET}" $target ] {
				if { $_ENABLE_ACQUIRE == 0 } {
					sleep 100
					psoc6 reset_halt
				} else {
					$target arp_halt
				}
			} else {
				$target arp_halt
			}
			$target arp_waitstate halted 100
		}
	}
}

global _HAS_WORKFLASH
if { ![info exists _HAS_WORKFLASH] } {
	set _HAS_WORKFLASH 1
}

if { $_ENABLE_CM0 } {
	target create ${TARGET}.cm0 cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 0
	${TARGET}.cm0 configure -work-area-phys $_WORKAREAADDR_CM0 -work-area-size $_WORKAREASIZE_CM0 -work-area-backup 0

	flash bank ${_CHIPNAME}_main_cm0		${FLASH_DRIVER_NAME} 0x10000000 0 0 0 ${TARGET}.cm0
	if { $_HAS_WORKFLASH } {
		flash bank ${_CHIPNAME}_work_cm0		${FLASH_DRIVER_NAME} 0x14000000 0 0 0 ${TARGET}.cm0
	}
	flash bank ${_CHIPNAME}_super_cm0		${FLASH_DRIVER_NAME} 0x16000000 0 0 0 ${TARGET}.cm0
	flash bank ${_CHIPNAME}_efuse_cm0		${FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.cm0 external

	add_verify_range ${TARGET}.cm0 0x08000000 0x00200000
	add_verify_range ${TARGET}.cm0 0x10000000 0x00200000
	add_verify_range ${TARGET}.cm0 0x14000000 0x00200000
	add_verify_range ${TARGET}.cm0 0x16000000 0x00200000
	add_verify_range ${TARGET}.cm0 0x90700000 0x00000400

	${TARGET}.cm0 cortex_m reset_config sysresetreq
	${TARGET}.cm0 configure -event reset-deassert-post "psoc6_deassert_post ${TARGET}.cm0"
	${TARGET}.cm0 configure -event examine-end "cy_get_set_device_param $FLASH_DRIVER_NAME main_cm0 work_cm0"
}

if { $_ENABLE_CM4 } {
	target create ${TARGET}.cm4 cortex_m -dap $_CHIPNAME.dap -ap-num 2 -coreid 1
	${TARGET}.cm4 configure -work-area-phys $_WORKAREAADDR_CM4 -work-area-size $_WORKAREASIZE_CM4 -work-area-backup 0

	if { $_ENABLE_CM0 } {
		flash bank ${_CHIPNAME}_main_cm4		virtual 0x10000000 0 0 0 ${TARGET}.cm4 ${_CHIPNAME}_main_cm0
		if { $_HAS_WORKFLASH } {
			flash bank ${_CHIPNAME}_work_cm4		virtual 0x14000000 0 0 0 ${TARGET}.cm4 ${_CHIPNAME}_work_cm0
		}
		flash bank ${_CHIPNAME}_super_cm4		virtual 0x16000000 0 0 0 ${TARGET}.cm4 ${_CHIPNAME}_super_cm0
		flash bank ${_CHIPNAME}_efuse_cm4		virtual 0x90700000 1024 1 1 ${TARGET}.cm4 ${_CHIPNAME}_efuse_cm0 external
		# Avoid double-reset on dual-core parts
		${TARGET}.cm4 configure -event reset-assert {}
		targets ${TARGET}.cm0
	} else {
		flash bank ${_CHIPNAME}_main_cm4		${FLASH_DRIVER_NAME} 0x10000000 0 0 0 ${TARGET}.cm4
		if { $_HAS_WORKFLASH } {
			flash bank ${_CHIPNAME}_work_cm4		${FLASH_DRIVER_NAME} 0x14000000 0 0 0 ${TARGET}.cm4
		}
		flash bank ${_CHIPNAME}_super_cm4		${FLASH_DRIVER_NAME} 0x16000000 0 0 0 ${TARGET}.cm4
		flash bank ${_CHIPNAME}_efuse_cm4		${FLASH_DRIVER_NAME}_efuse 0x90700000 1024 1 1 ${TARGET}.cm4 external
		${TARGET}.cm4 configure -event examine-end "cy_get_set_device_param $FLASH_DRIVER_NAME main_cm4 work_cm4"
	}

	add_verify_range ${TARGET}.cm4 0x08000000 0x00200000
	add_verify_range ${TARGET}.cm4 0x10000000 0x00200000
	add_verify_range ${TARGET}.cm4 0x14000000 0x00200000
	add_verify_range ${TARGET}.cm4 0x16000000 0x00200000
	add_verify_range ${TARGET}.cm4 0x90700000 0x00000400

	${TARGET}.cm4 cortex_m reset_config sysresetreq
	${TARGET}.cm4 configure -event reset-deassert-post "psoc6_deassert_post ${TARGET}.cm4"
}

unset _HAS_WORKFLASH

psoc6 add_safe_sflash_region 0x16000800 0x800 0xEE
psoc6 add_safe_sflash_region 0x16001A00 0x200 0xC0
psoc6 add_safe_sflash_region 0x16005A00 0xC00 0xEE
psoc6 add_safe_sflash_region 0x16007C00 0x400 0xEE

if { ![info exists PSOC6_JTAG_IRLEN] } {
	set PSOC6_JTAG_IRLEN 18
}

if {[using_jtag]} {
	swj_newdap $_CHIPNAME bs -irlen $PSOC6_JTAG_IRLEN -expected-id 0
}

proc mrw { ADDR } {
	set foo(0) 0
	if ![ catch { mem2array foo 32 $ADDR 1  } msg ] {
		return $foo(0)
	} else {
		error $msg
	}
}

#proc chip_protection {} {
#	global CPUSS_PROTECTION_REG
#	set protection [ expr [mrw ${CPUSS_PROTECTION_REG}]]
#	echo "CPUSS_PROTECTION_REG = $CPUSS_PROTECTION_REG"
#	set ret "X"
#
#	switch $protection {
#		1 { set ret "VIRGIN" }
#		2 { set ret "NORMAL" }
#		3 { set ret "SECURE" }
#		4 { set ret "DEAD" }
#		default { set ret "UNKNOWN" }
#	}
#
#	return $ret
#}

proc acquire { target } {
	global _ENABLE_ACQUIRE

	if { $_ENABLE_ACQUIRE == 0 } {
		echo "----------------------------------------------------------------"
		echo "Test Mode acquire disabled. Use 'set ENABLE_ACQUIRE 1' to enable"
		echo "----------------------------------------------------------------"
		error
	}

	# acquire will leave CPU in running state
	# openocd does not expect this
	kitprog3 acquire_psoc

	# we need to re-examine and halt target manually
	${target} arp_examine
	${target} arp_poll
	${target} arp_poll

	# Ensure target has stopped on WFI instruction
	set loops 200
	while { $loops } {
		set sleeping [ expr [mrw 0xE000EDF0] & 0x00040000 ]
		if { $sleeping } break
		set loops [ expr $loops - 1 ]
		sleep 10
	}

	if { $sleeping } {
		${target} arp_halt
		${target} arp_waitstate halted 100
		echo "** Device acquired successfully"
		return
	}

	echo "--------------------------------------------"
	echo "Failed to acquire PSoC 6 device in Test Mode"
	echo "--------------------------------------------"
	error
}

add_usage_text acquire "target (e.g. psoc6.cpu.cm0)"
add_help_text acquire "Acquires PSoC 6 device in Test Mode"

proc detect_smif {{sflash_base 0x16000000}} {
  global QSPI_FLASHLOADER
  global _CHIPNAME
  global TARGET
  set cfg_ptr  [mrw [mrw [ expr $sflash_base + 62 * 512 + 0x0C ]]]
  if { $cfg_ptr == 0 || $cfg_ptr == 0xFFFFFFFF  || $cfg_ptr < 0x10000000 || $cfg_ptr > 0x10200000 } {
	echo "** SMIF configuration structure not found or invalid"
	return
  }
  set chip_num [mrw $cfg_ptr]
  set chip_cfg_arry_p [mrw [expr $cfg_ptr + 4]]

  echo ""
  for {set i 0} {$i < $chip_num} {incr i} {
	set chip_cfg  [mrw [expr $chip_cfg_arry_p + 4 * $i]]
	set region_base [mrw [expr $chip_cfg + 12]]
	set region_size [mrw [expr $chip_cfg + 16]]
	set phys_cfg    [mrw [expr $chip_cfg + 24]]
	set erase_size  [mrw [expr $phys_cfg + 24]]
	set prgm_size   [mrw [expr $phys_cfg + 36]]

	echo "### SMIF region #${i} - Erase Size: 0x[format %X $erase_size], Program Size: 0x[format %X $prgm_size]"
	echo "set SMIF_BANKS {1 {addr 0x[format %08X $region_base] size 0x[format %08X $region_size] psize 0x[format %X $prgm_size] esize 0x[format %X $erase_size]}}"
  }
}

add_usage_text detect_smif "sflash_base (optional, 0x16000000 by default)"
add_help_text detect_smif "Detects SMIF regions and displays flash bank configuration"

proc erase_all {} {
	lset banks [flash list]

	for {set i [expr [llength $banks] - 1]} { $i >= 0 } { set i [expr $i - 1]} {
		set bank [lindex $banks $i]
		if { $bank(name) != "virtual" } {
			echo "Erasing flash bank @[format 0x%08X $bank(base)]..."
			catch {flash erase_sector $i 0 last}
		}
	}
}

add_help_text erase_all "Erases all non-virtual flash banks (in reverse order, for SMIF compatibility)"

# example of qspi_config.cfg
#set SMIF_BANKS {
#  1 {addr 0x18000000 size 0x10000 psize 0x100 esize 0x1000}
#  2 {addr 0x18010000 size 0x10000 psize 0x100 esize 0x1000}
#  3 {addr 0x18020000 size 0x10000 psize 0x100 esize 0x1000}
#  4 {addr 0x18030000 size 0x10000 psize 0x100 esize 0x1000}
#}

catch {source [find qspi_config.cfg]}
if { [info exists SMIF_BANKS] } {
	foreach {key value} [array get SMIF_BANKS] {
		if { $_ENABLE_CM0 } {
			flash bank ${_CHIPNAME}_smif${key}_cm0 cmsis_flash $value(addr) $value(size) 4 4 ${TARGET}.cm0 ../flm/cypress/psoc6/${QSPI_FLASHLOADER} 0x1000 prefer_sector_erase
			flash bank ${_CHIPNAME}_smif${key}_cm4 virtual $value(addr) $value(size) 0 0 ${TARGET}.cm4 ${_CHIPNAME}_smif${key}_cm0
			add_verify_range ${TARGET}.cm0 $value(addr) $value(size)
			add_verify_range ${TARGET}.cm4 $value(addr) $value(size)
		} else {
			flash bank ${_CHIPNAME}_smif${key}_cm4 cmsis_flash $value(addr) $value(size) 4 4 ${TARGET}.cm4 ../flm/cypress/psoc6/${QSPI_FLASHLOADER} 0x1000 prefer_sector_erase
			add_verify_range ${TARGET}.cm4 $value(addr) $value(size)
		}
	}
}

gdb_smart_program enable

proc ocd_gdb_restart {target} {
	if [string match "*cm0" $target ] {
		reset init
		psoc6 reset_halt sysresetreq
	} else {
		reset run
		sleep 200
		psoc6 reset_halt sysresetreq
	}
}
