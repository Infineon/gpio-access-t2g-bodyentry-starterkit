#
# Configuration script for Cypress MACAW family of microcontrollers
#

source [find target/cympn.cfg]
source [find target/swj-dp.tcl]

if {[using_jtag]} {
   adapter speed 1000
} else {
   adapter speed 2000
}

adapter srst delay 25
adapter srst pulse_width 5

global _CHIPNAME
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME macaw
}

# Enable Test Mode Acquire (works only with KitProg3 / MiniProg4)
#
global _ENABLE_ACQUIRE
global _ENABLE_POWER_SUPPLY
if { [adapter name] eq "kitprog3" } {
	if { [info exists ENABLE_ACQUIRE] } {
		set _ENABLE_ACQUIRE $ENABLE_ACQUIRE
	} else {
		if {[using_jtag]} {
			set _ENABLE_ACQUIRE 0
			echo "** Test Mode acquire disabled (not supported in JTAG mode)"
		} else {
			set _ENABLE_ACQUIRE 1
		}
	}

	if { [info exists ENABLE_POWER_SUPPLY] } {
		set _ENABLE_POWER_SUPPLY $ENABLE_POWER_SUPPLY
	} else {
		set _ENABLE_POWER_SUPPLY 0
	}
} else {
	set _ENABLE_ACQUIRE  0
	set _ENABLE_POWER_SUPPLY 0
	echo "** Test Mode acquire not supported by selected adapter"
}

if { $_ENABLE_ACQUIRE } {
	echo "** Auto-acquire enabled, use \"set ENABLE_ACQUIRE 0\" to disable"
	kitprog3 acquire_config on 2 0 2
}

if { $_ENABLE_POWER_SUPPLY } {
	echo "** Enabling target power ($_ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
	kitprog3 power_config on $_ENABLE_POWER_SUPPLY
}

global _WORKAREASIZE_CM0
if { [info exists WORKAREASIZE_CM0] } {
	set _WORKAREASIZE_CM0 $WORKAREASIZE_CM0
} else {
	set _WORKAREASIZE_CM0 0x1C00
}

global _WORKAREAADDR_CM0
if { [info exists WORKAREAADDR_CM0] } {
	set _WORKAREAADDR_CM0 $WORKAREAADDR_CM0
} else {
	set _WORKAREAADDR_CM0 0x08000000
}

global TARGET
set TARGET $_CHIPNAME.cpu
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

proc init_reset { mode } {
	global RESET_MODE
	set RESET_MODE $mode

	if {[using_jtag]} {
		jtag arp_init-reset
	}
}

proc macaw_show_siliconid { } {
	global MPN

	local_echo off
	macaw sromcall_prepare
	set family_rev [macaw sromcall 0x001]
	set siid_prot [macaw sromcall 0x101]
	macaw sromcall_release
	local_echo on

	set siid_str [format "%04X" [expr ($siid_prot & 0x0000FFFF)]]
	set famid_str [format "%03X" [expr ($family_rev & 0x0000FFFF)]]
	set revid_str [format "%02X" [expr ($family_rev & 0x00FF0000) >> 16]]

	switch [expr ($siid_prot & 0x000F0000) >> 0x10] {
		1 { set prot_str "VIRGIN" }
		2 { set prot_str "NORMAL" }
		default { set prot_str "UNKNOWN" }
	}

	echo "***************************************"
	echo "** Silicon: 0x$siid_str, Family: 0x$famid_str, Rev.: 0x$revid_str"
	if { [dict exists $MPN $siid_str] } {
		echo "** Detected Device: [lindex $MPN($siid_str) 0]"
	}
	echo "** Chip Protection: $prot_str"
	echo "***************************************"
}

# Utility to make 'reset halt' work as reset;halt on a target
# It does not prevent running code after reset
proc macaw_deassert_post { target } {
	global _ENABLE_ACQUIRE
	global RESET_MODE

	if { $RESET_MODE ne "run" } {
		if { $_ENABLE_ACQUIRE } {
			catch { acquire macaw.cpu.cm0 }
		}

		# PSoC 6 cleared AP registers including TAR during reset
		# Force examine to synchronize OpenOCD target status
		$target arp_examine
		$target arp_poll
		$target arp_poll
		set st [$target curstate]

		if { $st eq "reset" } {
			# we assume running state follows
			# if reset accidentally halts, waiting is useless
			catch { $target arp_waitstate running 100 }
			set st [$target curstate]
		}

		if { $st eq "running" } {
			echo "** $target: Ran after reset and before halt..."
			if { $_ENABLE_ACQUIRE == 0 } {
				sleep 100
				macaw reset_halt
			} else {
				$target arp_halt
			}

			$target arp_waitstate halted 100
		}
		macaw_show_siliconid
	}
}

target create ${TARGET}.sysap mem_ap -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
target create ${TARGET}.cm0 cortex_m -dap $_CHIPNAME.dap -ap-num 1 -coreid 0
${TARGET}.cm0 configure -work-area-phys $_WORKAREAADDR_CM0 -work-area-size $_WORKAREASIZE_CM0 -work-area-backup 0

flash bank ${_CHIPNAME}_efuse_cm0		macaw_efuse 0x90700000 1536 1 1 ${TARGET}.cm0 external

${TARGET}.cm0 cortex_m reset_config sysresetreq
${TARGET}.cm0 configure -event reset-deassert-post "macaw_deassert_post ${TARGET}.cm0"

if { ![info exists MACAW_JTAG_IRLEN] } {
	set MACAW_JTAG_IRLEN 18
}

if {[using_jtag]} {
	swj_newdap $_CHIPNAME bs -irlen $MACAW_JTAG_IRLEN -expected-id 0
}

proc mrw { ADDR } {
	set foo(0) 0
	if ![ catch { mem2array foo 32 $ADDR 1  } msg ] {
		return $foo(0)
	} else {
		error $msg
	}
}

proc acquire { target } {
	global _ENABLE_ACQUIRE

	if { $_ENABLE_ACQUIRE == 0 } {
		echo "----------------------------------------------------------------"
		echo "Test Mode acquire disabled. Use 'set ENABLE_ACQUIRE 1' to enable"
		echo "----------------------------------------------------------------"
		error
	}

	# acquire will leave CPU in running state
	# openocd does not expect this
	kitprog3 acquire_psoc

	# we need to re-examine and halt target manually
	${target} arp_examine
	${target} arp_poll
	${target} arp_poll

	# Ensure target has stopped on WFI instruction
	set loops 20
	while { $loops } {
		set sleeping [ expr [mrw 0xE000EDF0] & 0x00040000 ]
		if { $sleeping } break
		set loops [ expr $loops - 1 ]
		sleep 10
	}

	if { $sleeping } {
		${target} arp_halt
		${target} arp_waitstate halted 100
		echo "** Device acquired successfully"
		return
	}

	echo "-------------------------------------------"
	echo "Failed to acquire MACAW device in Test Mode"
	echo "-------------------------------------------"
	error
}
