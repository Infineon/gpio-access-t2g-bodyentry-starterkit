# script for Cypress PSoC 4 devices

#
# PSoC 4 devices support SWD transports only.
#
source [find target/swj-dp.tcl]
adapter speed 2000

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME psoc4
}

# Work-area is a space in RAM used for flash programming
# By default use 2kB
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x800
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x0bb11477
}

global _PSOC4_USE_MEM_AP
if { [info exists PSOC4_USE_MEM_AP] } {
	set _PSOC4_USE_MEM_AP $PSOC4_USE_MEM_AP
} else {
	set _PSOC4_USE_MEM_AP 0
}

global _PSOC4_USE_ACQUIRE
if { [string match "kitprog*" [adapter name]] } {
	if { [info exists PSOC4_USE_ACQUIRE] } {
		set _PSOC4_USE_ACQUIRE $PSOC4_USE_ACQUIRE
	} else {
		echo "** Auto-acquire enabled, use \"set PSOC4_USE_ACQUIRE 0\" to disable"
		set _PSOC4_USE_ACQUIRE 1
	}
} else {
	echo "** Test Mode acquire not supported by selected adapter"
	set _PSOC4_USE_ACQUIRE 0
}

global _ENABLE_POWER_SUPPLY
set _ENABLE_POWER_SUPPLY 0
if { [adapter name] eq "kitprog3" } {
	if { [info exists ENABLE_POWER_SUPPLY] } {
		set _ENABLE_POWER_SUPPLY $ENABLE_POWER_SUPPLY
	}
}

if { [string match "kitprog3" [adapter name]] } {
	if { $_PSOC4_USE_ACQUIRE } {
		kitprog3 acquire_config on 0 0 3
	}
	if { $_ENABLE_POWER_SUPPLY } {
		echo "** Enabling target power ($_ENABLE_POWER_SUPPLY mV) \"set ENABLE_POWER_SUPPLY 0\" to disable"
		kitprog3 power_config on $_ENABLE_POWER_SUPPLY
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu

if {$_PSOC4_USE_MEM_AP == 1} {
	target create $_TARGETNAME mem_ap -dap $_CHIPNAME.dap -ap-num 0 -coreid 255
	reset_config srst_only
} else {
	target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap
	$_TARGETNAME cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
$_TARGETNAME configure -event reset-deassert-post "psoc4_deassert_post $_TARGETNAME"
$_TARGETNAME configure -event examine-end "psoc4 silicon_info"

flash bank $_CHIPNAME.mflash psoc4 0x00000000 0 0 0 $_TARGETNAME
flash bank $_CHIPNAME.sflash psoc4 0x0FFFF200 0 0 0 $_TARGETNAME
flash bank $_CHIPNAME.flashp psoc4_flash_prot 0x90400000 0 0 0 $_TARGETNAME

add_verify_range $_TARGETNAME 0x00000000 0x00040000
add_verify_range $_TARGETNAME 0x0FFFF200 0x00000800
add_verify_range $_TARGETNAME 0x20000000 0x00040000
add_verify_range $_TARGETNAME 0x90400000 0x00000400

proc init_reset { mode } {
	global RESET_MODE
	set RESET_MODE $mode
}

proc acquire { target } {
	global _PSOC4_USE_ACQUIRE
	global _PSOC4_USE_MEM_AP

	if { $_PSOC4_USE_ACQUIRE == 0 } {
		echo "----------------------------------------------------------------"
		echo "Test Mode acquire disabled. Use 'set PSOC4_USE_ACQUIRE 1' to enable"
		echo "----------------------------------------------------------------"
		error
	}

	# acquire will leave CPU in running state
	# openocd does not expect this
	[adapter name] acquire_psoc

	# we need to re-examine and halt target manually
	${target} arp_examine
	${target} arp_poll
	${target} arp_poll

	# In the PROTECTED mode access is locked for everything except System Calls
	if { $_PSOC4_USE_MEM_AP == 1 } {
		echo "** Device acquired successfully"
		return
	}

	# Ensure target has stopped on WFI instruction
	set loops 200
	while { $loops } {
		set sleeping [ expr [mrw 0xE000EDF0] & 0x00040000 ]
		if { $sleeping } break
		set loops [ expr $loops - 1 ]
		sleep 10
	}

	if { $sleeping } {
		${target} arp_halt
		${target} arp_waitstate halted 100
		echo "** Device acquired successfully"
		return
	}

	echo "--------------------------------------------"
	echo "Failed to acquire PSoC 4 device in Test Mode"
	echo "--------------------------------------------"
	error
}

proc mrw { ADDR } {
	set foo(0) 0
	if ![ catch { mem2array foo 32 $ADDR 1 } msg ] {
		return $foo(0)
	} else {
		error $msg
	}
}

# Utility to make 'reset halt' work as reset;halt on a target
# It does not prevent running code after reset
proc psoc4_deassert_post { target } {
	global _PSOC4_USE_ACQUIRE
	global _PSOC4_USE_MEM_AP
	global RESET_MODE

	if { $RESET_MODE ne "run" } {
		if { $_PSOC4_USE_ACQUIRE } {
			acquire $target
		}

		# PSoC 4 cleares AP registers including TAR during reset
		# Force examine to synchronize OpenOCD target status
		$target arp_examine
		catch {$target arp_poll}
		catch {$target arp_poll}
		set st [$target curstate]

		if { $st eq "reset" } {
			# we assume running state follows
			# if reset accidentally halts, waiting is useless
			catch { $target arp_waitstate running 100 }
			set st [$target curstate]
		}

		if { $st eq "running" } {
			echo "** $target: Ran after reset and before halt..."
			if { !$_PSOC4_USE_ACQUIRE && !$_PSOC4_USE_MEM_AP } {
				sleep 100
				psoc4 reset_halt
			} else {
				$target arp_halt
			}
			$target arp_waitstate halted 100
		}
	}
}
