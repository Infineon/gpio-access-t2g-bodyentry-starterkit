#
# $ Copyright Cypress Semiconductor $
#


# default ports
telnet_port 4444
#gdb_port pipe
gdb_port 3333
#tcl_port 6666

#swj_mode 2
gdb_memory_map enable

gdb_breakpoint_override hard

init

#mww 0xE000EDF0 0xa05f000b
#mww 0xE000EDF0 0xa05f000d
mww 0xE000EDF0 0xa05f0003

mww 0xE000ED0C 0x05FA0002

# reset halt
# halt
mww 0xE000EDF0 0xa05f0003

mww 0xE000ED0C 0x05FA0002

#request reset
#mww 0xE000ED0C 0x5FA0004
#step

# Disable the Watchdog
# See section 4.4.1 of AMBA Design Kit Technical Reference Manual r3p0 - Watchdog Control Register
# http://infocenter.arm.com/help/topic/com.arm.doc.ddi0243c/DDI0243C_adk_r3p0_trm.pdf
mww phys 0x00329C00 0x1ACCE551
mww phys 0x00329008 0
mww phys 0x00329C00 0

# Setup the SCB VTOR (Vector Table Offset Register) to point to our SRAM vector table
# this cannot be done in the code as there may already be pending interrupts.
#mww 0xE000ED08 [expr 0x00200000 | 0x20000000 ]
#mww 0xE000ED08 0x00216000
#mww 0xE000ED08 0x00740000
# Clear SysTick Control and Status Register
#mww 0xE000E010 0

# Clear interrupt enables using the Interrupt Clear-Enable Registers
for { set addr 0xE000E180 } { $addr <= 0xE000E19C } { incr $addr } {
    mww $addr 0xFFFFFFFF
}

# Clear pending interrupts using the Interrupt Clear-Pending Registers
for { set addr 0xE000E280 } { $addr <= 0xE000E29C } { incr $addr } {
    mww $addr 0xFFFFFFFF
}

# Clear Interrupt Control State Register
mww 0xE000ED04 0

# Clear active interrupt vector using Application Interrupt and Reset Control Register
set VECTKEY       0x05FA0000
set VECTCLRACTIVE 0x00000002
#mww 0xE000ED0C [expr $VECTKEY | $VECTCLRACTIVE ]
mww 0xe000ed24 0x70000

# Clear Configuration Control Register
mww 0xE000ED14 0x0

#clear RAM so that the rtos awareness does not detect threads left in memory from previous run
#for { set addr $CHIP_SRAM1_START } { $addr <= [expr $CHIP_SRAM1_START + $CHIP_SRAM1_SIZE] } { set addr [expr $addr + 0x100] } {
#puts "write $addr"
#    mww $addr 0x00000000 0x100
#}
#for { set addr $CHIP_SRAM2_START } { $addr <= [expr $CHIP_SRAM2_START + $CHIP_SRAM2_SIZE] } { set addr [expr $addr + 0x100] } {
#puts "write $addr"
#    mww $addr 0x00000000 0x100
#}
#mww 0x002008fc 0x00000000 88

# clear OS variable locations to avoid showing threads left in memory from a previous run
mww 0x00140000 0x0  0x140

# clear FreeRTOS locations
mww 0x00215b6c 0x0  80


#mww 0x00215B6C 0x0  18725



#mww 0xE000ED08 0x00216000
#mww $addr 0x00000000 0x1000

#Turn off LPO_CLK on SPI2_MOSI pin
mww phys 0x32150c 0x4


mww phys 0x320078 0x100
mww phys 0x32008c 0x00000



#reg sp 0x0200960
#reg sp 0x750970



#mww 0x320100 0xffffffff
#mww 0x32005c 0xffffffff
#mww 0x35002c 0xffffffff

#reset halt


# turn on debug message
#debug_level 3
# enable WLAN power
mww phys 0x0064015c 0x7

# Set flags to cause timer based peripherals to stop during breakpoints.
#mww 0xE0042008 0xffffffff

#jtag_khz 1000
#verify_ircapture disable

#Enable Timer1 interrupt #17
#mww 0xe000e10 0x20000

#cortex_m3 maskisr on

#Enable memory direct path
# cr_pds_ctl_adr mask bit18
mww phys 0x321520 0x18003e0
#wlan_mem_set_adr
mww phys 0x3201fc 0x45
#gci_gciindirectaddress 8
mww phys 0x650040 8
#Set last 256K RAM to Apps
mww phys 0x650200 0x30
#mww 0x640160 0x7
mww phys 0x3201fc 0xd5

adapter speed 1000
